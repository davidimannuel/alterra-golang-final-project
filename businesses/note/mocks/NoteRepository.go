// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	note "keep-remind-app/businesses/note"

	mock "github.com/stretchr/testify/mock"
)

// NoteRepository is an autogenerated mock type for the NoteRepository type
type NoteRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, data
func (_m *NoteRepository) Add(ctx context.Context, data *note.NoteDomain) (int, error) {
	ret := _m.Called(ctx, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *note.NoteDomain) int); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *note.NoteDomain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *NoteRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: ctx, data
func (_m *NoteRepository) Edit(ctx context.Context, data *note.NoteDomain) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *note.NoteDomain) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, param
func (_m *NoteRepository) FindAll(ctx context.Context, param *note.NoteParameter) ([]note.NoteDomain, error) {
	ret := _m.Called(ctx, param)

	var r0 []note.NoteDomain
	if rf, ok := ret.Get(0).(func(context.Context, *note.NoteParameter) []note.NoteDomain); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]note.NoteDomain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *note.NoteParameter) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllPagination provides a mock function with given fields: ctx, param
func (_m *NoteRepository) FindAllPagination(ctx context.Context, param *note.NoteParameter) ([]note.NoteDomain, int, error) {
	ret := _m.Called(ctx, param)

	var r0 []note.NoteDomain
	if rf, ok := ret.Get(0).(func(context.Context, *note.NoteParameter) []note.NoteDomain); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]note.NoteDomain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, *note.NoteParameter) int); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *note.NoteParameter) error); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindOne provides a mock function with given fields: ctx, param
func (_m *NoteRepository) FindOne(ctx context.Context, param *note.NoteParameter) (note.NoteDomain, error) {
	ret := _m.Called(ctx, param)

	var r0 note.NoteDomain
	if rf, ok := ret.Get(0).(func(context.Context, *note.NoteParameter) note.NoteDomain); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(note.NoteDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *note.NoteParameter) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
