// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	user "keep-remind-app/businesses/user"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, data
func (_m *UserRepository) Add(ctx context.Context, data *user.UserDomain) (user.UserDomain, error) {
	ret := _m.Called(ctx, data)

	var r0 user.UserDomain
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserDomain) user.UserDomain); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(user.UserDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.UserDomain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: ctx, data
func (_m *UserRepository) Edit(ctx context.Context, data *user.UserDomain) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserDomain) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOne provides a mock function with given fields: ctx, param
func (_m *UserRepository) FindOne(ctx context.Context, param *user.UserParameter) (user.UserDomain, error) {
	ret := _m.Called(ctx, param)

	var r0 user.UserDomain
	if rf, ok := ret.Get(0).(func(context.Context, *user.UserParameter) user.UserDomain); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(user.UserDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.UserParameter) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
